const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bcrypt = require('bcryptjs');

const DB_PATH = path.join(__dirname, 'octolab.db');

let db;

function initDatabase() {
  return new Promise((resolve, reject) => {
    db = new sqlite3.Database(DB_PATH, (err) => {
      if (err) {
        console.error('Erreur lors de l\'ouverture de la base de donnÃ©es:', err.message);
        reject(err);
        return;
      }
      console.log('ðŸ“Š Base de donnÃ©es SQLite connectÃ©e');
      
      // CrÃ©ation des tables
      createTables()
        .then(() => insertInitialData())
        .then(() => {
          console.log('âœ… Base de donnÃ©es initialisÃ©e avec succÃ¨s');
          resolve();
        })
        .catch(reject);
    });
  });
}

function createTables() {
  return new Promise((resolve, reject) => {
    const queries = [
      // Table des utilisateurs
      `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        name TEXT NOT NULL,
        role TEXT DEFAULT 'researcher',
        clearance_level INTEGER DEFAULT 2,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`,
      
      // Table des articles
      `CREATE TABLE IF NOT EXISTS articles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        type TEXT DEFAULT 'research',
        classification TEXT DEFAULT 'CONFIDENTIEL',
        author TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        leaked BOOLEAN DEFAULT 0
      )`,
      
      // Table des projets de recherche
      `CREATE TABLE IF NOT EXISTS research_projects (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        status TEXT DEFAULT 'active',
        lead_researcher TEXT,
        classification TEXT DEFAULT 'SECRET',
        progress INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`,
      
      // Table des membres de l'Ã©quipe
      `CREATE TABLE IF NOT EXISTS team_members (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        role TEXT NOT NULL,
        specialization TEXT,
        avatar_color TEXT,
        status TEXT DEFAULT 'active',
        bio TEXT
      )`
    ];
    
    let completed = 0;
    queries.forEach((query, index) => {
      db.run(query, (err) => {
        if (err) {
          reject(err);
          return;
        }
        completed++;
        if (completed === queries.length) {
          resolve();
        }
      });
    });
  });
}

function insertInitialData() {
  return new Promise(async (resolve, reject) => {
    try {
      // Hash du mot de passe
      const hashedPassword = await bcrypt.hash('tentacle123', 10);
      
      const insertQueries = [
        // Utilisateurs
        {
          query: `INSERT OR IGNORE INTO users (email, password, name, role, clearance_level) VALUES (?, ?, ?, ?, ?)`,
          params: ['researcher@octolab.org', hashedPassword, 'Dr. A. Researcher', 'senior_researcher', 4]
        },
        {
          query: `INSERT OR IGNORE INTO users (email, password, name, role, clearance_level) VALUES (?, ?, ?, ?, ?)`,
          params: ['admin@octolab.org', hashedPassword, 'Directeur Lab', 'admin', 5]
        },
        
        // Article interceptÃ©
        {
          query: `INSERT OR IGNORE INTO articles (id, title, content, type, classification, author, leaked) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          params: [1, 'FUITE: DÃ©couverte troublante au laboratoire OctoLab', 
            `ARTICLE INTERCEPTÃ‰ - Source anonyme\n\nUne source interne au mystÃ©rieux laboratoire OctoLab nous a fait parvenir des documents troublants concernant leurs recherches sur les crÃ©atures qu'ils appellent "Octopouces".\n\nSelon ces documents, ces entitÃ©s parasitaires prÃ©senteraient des capacitÃ©s d'adaptation et d'intelligence dÃ©passant tout ce qui Ã©tait connu jusqu'alors. Les chercheurs auraient rÃ©ussi Ã  Ã©tablir une forme de communication primitive avec certains spÃ©cimens.\n\n"Ce que nous avons dÃ©couvert remet en question notre comprÃ©hension de l'intelligence biologique", dÃ©clare un document signÃ© par le Dr. [CENSURÃ‰].\n\nLe laboratoire n'a pas souhaitÃ© commenter ces rÃ©vÃ©lations. Nos tentatives de contact sont restÃ©es sans rÃ©ponse.\n\nPour plus d'informations sur cette enquÃªte, consultez: http://octolab.org/?id=1\n\n[ARTICLE PUBLIÃ‰ PUIS RAPIDEMENT RETIRÃ‰ - COPIE SAUVEGARDÃ‰E]`,
            'leak', 'PUBLIC', 'Journaliste Anonyme', 1]
        },
        
        // Projets de recherche
        {
          query: `INSERT OR IGNORE INTO research_projects (name, description, status, lead_researcher, progress) VALUES (?, ?, ?, ?, ?)`,
          params: ['Projet Kraken', 'Ã‰tude comportementale des spÃ©cimens Alpha', 'active', 'Dr. Marina Deep', 75]
        },
        {
          query: `INSERT OR IGNORE INTO research_projects (name, description, status, lead_researcher, progress) VALUES (?, ?, ?, ?, ?)`,
          params: ['Initiative Tentacule', 'Analyse gÃ©nÃ©tique et sÃ©quenÃ§age ADN', 'active', 'Dr. Gene Splice', 60]
        },
        {
          query: `INSERT OR IGNORE INTO research_projects (name, description, status, lead_researcher, progress) VALUES (?, ?, ?, ?, ?)`,
          params: ['Protocole Symbiose', 'Recherche sur les interactions hÃ´te-parasite', 'classified', 'Dr. [REDACTED]', 90]
        },
        
        // Membres de l'Ã©quipe
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Dr. Marina Deep', 'Directrice de Recherche', 'Biologie Marine Parasitaire', '#0891b2', 'SpÃ©cialiste reconnue des organismes aquatiques complexes. 15 ans d\'expÃ©rience dans l\'Ã©tude des symbioses parasitaires.']
        },
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Dr. Gene Splice', 'GÃ©nÃ©ticien Principal', 'SÃ©quenÃ§age ADN AvancÃ©', '#0d9488', 'Expert en manipulation gÃ©nÃ©tique et analyse molÃ©culaire. Pionnier des techniques de sÃ©quenÃ§age rapide.']
        },
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Dr. Alex Cipher', 'Cryptanalyste', 'Communication Inter-espÃ¨ces', '#1e40af', 'SpÃ©cialiste des systÃ¨mes de communication complexes. Travaille sur le dÃ©codage des signaux bio-Ã©lectriques.']
        },
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Dr. Sam Neural', 'Neuroscientifique', 'Intelligence Artificielle Biologique', '#7c3aed', 'Recherche sur les rÃ©seaux neuronaux biologiques et l\'intelligence distribuÃ©e des organismes parasitaires.']
        },
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Dr. Riley Quantum', 'Physicien ThÃ©oricien', 'MÃ©canique Quantique Biologique', '#dc2626', 'Ã‰tudie les phÃ©nomÃ¨nes quantiques dans les systÃ¨mes biologiques complexes et la conscience collective.']
        },
        {
          query: `INSERT OR IGNORE INTO team_members (name, role, specialization, avatar_color, bio) VALUES (?, ?, ?, ?, ?)`,
          params: ['Agent X-7', 'Coordinateur SÃ©curitÃ©', 'Protocoles de Confinement', '#374151', 'Responsable de la sÃ©curitÃ© du laboratoire et des protocoles de confinement des spÃ©cimens. [CLASSIFICATION NIVEAU 5]']
        }
      ];
      
      let completed = 0;
      insertQueries.forEach(({ query, params }) => {
        db.run(query, params, (err) => {
          if (err && !err.message.includes('UNIQUE constraint failed')) {
            reject(err);
            return;
          }
          completed++;
          if (completed === insertQueries.length) {
            resolve();
          }
        });
      });
      
    } catch (error) {
      reject(error);
    }
  });
}

function getDatabase() {
  return db;
}

module.exports = {
  initDatabase,
  getDatabase
};